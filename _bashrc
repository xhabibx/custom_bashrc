# .bashrc

# Source global definitions
if [ -f /etc/bashrc ]; then
	. /etc/bashrc
fi

#if [ -f ~/.bashrc ]; then
#	. ~/.bashrc
#fi

#################################################################
#################################################################
#################################################################

####################################
# pushing bash prompt remotely:
# https://superuser.com/questions/221001/pushing-my-ps1-prompt-over-ssh
#ssh -t user@host "remote='$PS1' bash -i"
#Then, at the prompt:
#PS1=$remote
#####################
# guides
# http://jakemccrary.com/blog/2015/05/03/put-the-last-commands-run-time-in-your-bash-prompt/
# see https://github.com/nojhan/liquidprompt
# http://www.askapache.com/linux/bash-power-prompt/
# history guide: https://www.digitalocean.com/community/tutorials/how-to-use-bash-history-commands-and-expansions-on-a-linux-vps
# see http://brettterpstra.com/2009/11/17/my-new-favorite-bash-prompt/
# generate hostname color depending on name:
# https://serverfault.com/questions/221108/different-color-prompts-for-different-machines-when-using-terminal-ssh
# https://www.maketecheasier.com/more-useful-and-interesting-bash-prompts/ # megafancyprompt

# colors:
# http://bitmote.com/index.php?post/2012/11/19/Using-ANSI-Color-Codes-to-Colorize-Your-Bash-Prompt-on-Linux
# http://blog.taylormcgann.com/tag/prompt-color/
#################################################################
#################################################################
#################################################################
### To optimize gedit calls from the terminal.

function gedit(){ command gedit "$@" &>/dev/null & }

function Ngedit(){ command gedit --new-window "$@" &>/dev/null & }

function terminator(){ command terminator --geometry=945x1200+0+0 "$@" &>/dev/null & }

function colsw(){ 
        ## switches theme color set by $THEME_VAR vals range from - 0 to 9
        cp ~/.bashrc ~/.bashrc_OG ### create failsafebackup first
        local CURRCOL=`grep "THEME_VAR=" ~/.bashrc | grep -v sed | tr '=' ' ' | awk '{print $2}'`
        cat ~/.bashrc | sed "s/THEME_VAR=${CURRCOL}/THEME_VAR=${1}/" > ~/.bashrc_temp && cp ~/.bashrc_temp ~/.bashrc
        source ~/.bashrc
}        

function cpcol(){ 
        ## copies .bashrc to remote host specified by $1 commandline arg
        rsync -av ~/.bashrc ${1}:~/ 
}    
##################################
### git branch functions
# check https://github.com/magicmonty/bash-git-prompt
# http://stackoverflow.com/questions/2657935/checking-for-a-dirty-index-or-untracked-files-with-git
function parse_git_branch() {
     gbranch_state=`git branch 2> /dev/null | grep "*" | sed -e 's/^*//'`
     git rev-parse 2> /dev/null
     if [[ $? == 0 ]]; then
        local gbranchstr=${gbranch_state}
        
        ############################################
        ### now parse git dirty state
        gstr=$(git status 2> /dev/null | tail -n1 | sed 's/,//' | awk '{print $1, $2, $3}')
        if [[ ${gstr} == "nothing to commit" ]]
              then
              dirty_state=""            
        elif [[ ${gstr} == "" ]]
              then
              dirty_state=""
        else
              dirty_state='\[\033[01;38;5;221m\]*'
        fi        
        
        ###
        ##################################################################
        
        ### untracked files present?
        if [[ ${dirty_state} == "\[\033[01;38;5;221m\]*" ]]
              then         
	      
	      ### Check how far git branch is relative to origin
              gbranchrel=`git status 2> /dev/null | grep "Your branch is"`
              gup=`echo $gbranchrel 2> /dev/null | grep ahead`
              gdown=`echo $gbranchrel 2> /dev/null | grep behind`
              grelN=`echo $gbranchrel | sed -nr 's/.*by ([0-9]+) commit?[a-z]./\1/p'`
              
              gupdown=""
              if [[ $gup != "" ]]; then              
                    gupdown=" ${SLATE}^${grelN}"
              fi
              
              if [[ $gdown != "" ]]; then              
                    gupdown=" ${SLATE}v${grelN}"
              fi
              ##########################################                    
              gporcelain=`git status --porcelain`                  
              untrN=`echo $gporcelain | tr ' ' '\n' | grep -w '??' | wc -l` # untracked
              addN=`echo $gporcelain | tr ' ' '\n' | grep -w '^A' | wc -l`  # added            
              modN=`echo $gporcelain | tr ' ' '\n' | grep -w '^M' | wc -l`  # modified                          
              commN=`echo $gporcelain | tr ' ' '\n' | grep -w '^AM' | wc -l`  # added & modified?                 
              delN=`echo $gporcelain | tr ' ' '\n' | grep -w '^D' | wc -l`  # deleted                

              #gitstats=" ${TEAL}u${LBLUE}a${MAGENTA}m${HIGreen}c${RED}d${SLATE}: ${TEAL}${untrN}${SLATE}/${LBLUE}${addN}${SLATE}/${MAGENTA}${modN}${SLATE}/${HIGreen}${commN}${SLATE}/${RED}${delN}" 
              ### Build up legend & git stats depending on what is appropriate
              
              gitlegend=" "
              gitstats2=""
              if [[ $untrN != "0" ]]; then
                    gitlegend="${gitlegend}${TEAL}u"
                    gitstats2="${gitstats2}${TEAL}${untrN}"                
              fi
              
              if [[ $addN != "0" ]]; then
                    gitlegend="${gitlegend}${LBLUE}a"
                    gitstats2="${gitstats2}${LBLUE}${addN}"                
              fi        
              
              if [[ $modN != "0" ]]; then
                    gitlegend="${gitlegend}${MAGENTA}m"
                    gitstats2="${gitstats2}${MAGENTA}${modN}"                
              fi                      

              if [[ $commN != "0" ]]; then
                    gitlegend="${gitlegend}${HIGreen}c"
                    gitstats2="${gitstats2}${HIGreen}${commN}"                
              fi       
              
              if [[ $delN != "0" ]]; then
                    gitlegend="${gitlegend}${RED}d"
                    gitstats2="${gitstats2}${RED}${delN}"                
              fi 
                            
              gitstats2=`echo $gitstats2 | sed "s/${gitlegend}/&{gitlegend}\//g"` # | sed 's/\/$//'`
              gitlegend="${gitlegend}${SLATE}: "
              
              
              
	      if [[ $gitstats2 == "" ]]; then
                    gitlegend=""
                    gitstats2="" 
              fi  	             
                    	     
        else
              gitstats="" 
        fi                      
        ############################################        
        
        echo "${BARCOL}──${TXTCOL}[git:${gupdown}${TXTCOL}${gbranchstr}${dirty_state}${gitlegend}${gitstats2}${TXTCOL}]"
     else
        echo " "
     fi
}

##################################
### last command timer
function timer_start {
  timer=${timer:-$SECONDS}
}

function timer_stop {
  timer_show=$(($SECONDS - $timer))
  unset timer
}

trap 'timer_start' DEBUG

##################################
### returns the last 2 fields of the working directory
pwdtail () { 
    pwd | awk -F/ '{nlast = NF -1;print $nlast"/"$NF}'
}
#################################################################
#################################################################
#################################################################

# User specific aliases and functions
HISTSIZE=5000
HISTFILESIZE=10000
shopt -s histappend

color_prompt=yes
if [ "$color_prompt" = yes ]; then

#PS1='${debian_chroot:+($debian_chroot)}\n\[\033[01;38;5;221m\]┌──\[\033[38;5;202m\][\u]\[\033[38;5;221m\]──\[\033[38;5;202m\][\H]\[\033[35m\]\[\033[38;5;221m\]──\[\033[38;5;202m\][speed: ${timer_show}s]\[\033[38;5;221m\]──\[\033[38;5;202m\][git:$(parse_git_branch)\[\033[01;38;5;221m\]$(parse_git_dirty)\[\033[38;5;202m\]]     \n\[\033[38;5;221m\]│\[\033[37m\] > \w\n\[\033[38;5;221m\]└──\[\033[38;5;202m\]`date +"%H:%M"`\[\033[1;38;5;221m\]──\\$\[\033[00m\] ' 

function prompt_command() {
        ###################################################
        ### set an error string for the prompt, if applicable
        if [ $? -eq 0 ]; then 
                ERRPROMPT="\[\033[1;5;32m\]$ "
        else
                ERRPROMPT='\[\033[1;5;31m\]X '
        fi  
        ###################################################  
        timer_stop
        ###################################################

        local MORANGE="\[\033[38;5;202m\]"
        local DORANGE="\[\033[38;5;221m\]"
        local YELLOW="\[\033[01;38;5;221m\]"        
        local TEAL="\[\033[0;5;36m\]"
        local BCYAN="\[\033[1;5;36m\]"
        local LBLUE="\[\033[0;1;34m\]"
        local VBLUE="\[\033[0;5;34m\]"
        local VLBLUE="\[\033[1;5;34m\]"        
        local GRAY="\[\033[0;37m\]"
        local DKGRAY="\[\033[1;30m\]"
        local WHITE="\[\033[1;37m\]"
        local TERGREEN="\[\033[00m\]"    
        local RED="\[\033[1;5;31m\]"    
        local CHATREU="\[\033[1;5;32m\]"    
        local LGREEN="\[\033[1;2;32m\]"   
        local SLATE="\[\033[1;2;37m\]"            
        local LYELLOW="\[\033[1;33m\]"      
        local LMAGENTA="\[\033[1;35m\]"      
        local MAGENTA="\[\033[1;5;35m\]"          
        ###
        # High Intensty
        local HIBlack="\[\033[0;90m\]" 
        local HIRed="\[\033[0;5;91m\]"  
        local HIGreen="\[\033[0;92m\]"  
        local HIYellow="\[\033[0;5;93m\]"  
        local HIBlue="\[\033[0;94m\]"
        local HIPurple="\[\033[0;95m\]"  
        local HICyan="\[\033[0;96m\]"  
        local HIWhite="\[\033[0;97m\]"                           
        
        local TITLEBAR=`pwdtail`
        local TTY_VAR=`tty 2> /dev/null | awk -F/ '{nlast = NF 0;print $nlast$NF": "}'`    

        ###################################################  
        ### Setup if else for different color themes
        # Turn the prompt symbol red if the user is root
        THEME_VAR=0                
  
        if [[ THEME_VAR -eq 0 ]]; then 
                ### local color
                local BARCOL="${DORANGE}"
                local TXTCOL="${MORANGE}"       
        elif [[ THEME_VAR -eq 1 ]]; then 
                local BARCOL="${LBLUE}"
                local TXTCOL="${TEAL}"      
        elif [[ THEME_VAR -eq 2 ]]; then 
                local BARCOL="${BCYAN}"
                local TXTCOL="${SLATE}"
        elif [[ THEME_VAR -eq 3 ]]; then 
                local BARCOL="${SLATE}"
                local TXTCOL="${CHATREU}"        
        elif [[ THEME_VAR -eq 4 ]]; then 
                local BARCOL="${LBLUE}"
                local TXTCOL="${LMAGENTA}"                                                                       
        elif [[ THEME_VAR -eq 5 ]]; then 
                local BARCOL="${LGREEN}"
                local TXTCOL="${CHATREU}"      
        elif [[ THEME_VAR -eq 6 ]]; then 
                local BARCOL="${VBLUE}"
                local TXTCOL="${VLBLUE}"   
        elif [[ THEME_VAR -eq 7 ]]; then 
                local BARCOL="${HIRed}"
                local TXTCOL="${HIYellow}"    
        elif [[ THEME_VAR -eq 8 ]]; then 
                local BARCOL="${HIPurple}"
                local TXTCOL="${HIBlue}"       
        elif [[ THEME_VAR -eq 9 ]]; then 
                local BARCOL="${TERGREEN}"
                local TXTCOL="${HICyan}"                                                                  
        else
                local BARCOL="${DORANGE}"
                local TXTCOL="${MORANGE}"        
                echo -e '\n\nbash color prompts not recognised!!\n Default theme will be set...\n\n\n'
                ### switch to default local color
                colsw 0 # switch back to 0                 
        fi    
        #
        if [[ $(id -u) -eq 0 ]]; then  
                ### root color
                local BARCOL="${MORANGE}"
                local TXTCOL="${RED}"           
        fi # root bit         
         
        ###################################################
        ### set titlebar
        echo -ne '\033]2;'${TTY_VAR}${TITLEBAR}'\007' 



        
PS1="${debian_chroot:+($debian_chroot)}\n\
${YELLOW}${BARCOL}┌──\
${TXTCOL}[\u]\
${BARCOL}──\
${TXTCOL}[\H]\
${BARCOL}──\
${TXTCOL}[speed: ${timer_show}s]\
$(parse_git_branch)
${BARCOL}│${DKGRAY}${TTY_VAR}${WHITE}> \w \
\n${BARCOL}└──\
${TXTCOL}`date +"%H:%M"`\
${BARCOL}──\
${ERRPROMPT}${TERGREEN}" 
}

PROMPT_COMMAND="prompt_command; history -a; history -c; history -r"
#

else
    PS1="\n\[\033[1;30m\][$$:$PPID - \j:\!\[\033[1;30m\]]\[\033[0;36m\] \T \
\[\033[1;30m\][\[\033[1;34m\]\u@\H\[\033[1;30m\]:\[\033[0;37m\]${SSH_TTY:-o} \
\[\033[0;32m\]+${SHLVL}\[\033[1;30m\]] \[\033[1;37m\]\w\[\033[0;37m\] \n\$ "
fi


#################################################################
#################################################################
#################################################################



alias qs='/bin/ls'
alias ll='/bin/ls -lht'
alias edbash='gedit ~/.bashrc &'
alias F5='source ~/.bashrc'
alias LDBOX='nohup ~/.dropbox-dist/dropboxd > ~/dropbox.nohup &'

alias LDBOX='dropbox.py start '
alias LDstat='dropbox.py status '
alias LDSTOP='dropbox.py stop '

alias his='history'


#export PATH=$PATH:/home/bsgt/programs/jdk1.8.0_102/bin:/home/bsgt/programs/jdk1.8.0_102/jre/bin

#export PATH=$PATH:/home/bsgt/programs/scala-2.11.8/bin
